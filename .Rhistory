install.packages("devtools")
devtools::install_github("ropenscilabs/tabulizer")
devtools::install_github("ropenscilabs/tabulizerjars")
devtools::install_github("ropenscilabs/tabulizer")
library(tabulizer)
system.file?
?
<-x
?system.file
file <- "C:/Users/mevans/Workplan/FWS7yrplan.pdf"
file <- "C:\Users\mevans\Workplan\FWS7yrplan.pdf"
file <- "C:/Users/mevans/Desktop/Workplan/FWS7yrplan.pdf"
pagecnt <- get_n_pages(f)
pagecnt <- get_n_pages(file)
table <- extract_tables(f)
table <- extract_tables(file)
head(table)
str(table)
str(table, method = "data.frame")
table <- extract_tables(file, method = "data.frame")
str(table)
head(table[[1]])
head(table[[2]])
head(table[[2]])
str(table[[2]])
head(table[[1]])
head(table[[1]],10)
table <- extract_tables(file, method = "data.frame")
head(table[[1]],10)
table <- extract_tables(file,  columns = 8, method = "data.frame")
table <- extract_tables(file,  columns = list(8), method = "data.frame")
head(table[[1]],10)
table <- extract_tables(file,  columns = list(c(8)), method = "data.frame")
head(table[[1]],10)
table <- extract_tables(file,  method = "data.frame", spreadsheet = FALSE)
head(table[[1]],10)
table <- extract_tables(file,  method = "data.frame", spreadsheet = TRUE)
head(table[[1]],10)
str(table)
head(table[[2]],10)
table <- extract_tables(file,  method = "data.frame", columns = list(8), spreadsheet = TRUE)
head(table[[2]],10)
table <- extract_tables(file,  method = "data.frame", columns = list(8))
head(table[[2]],10)
get_page_dims(file)
table <- extract_tables(file,  pages = 2, columns = list(8), guess = FALSE, area = list(c(2,2,610,788)), method = "data.frame")
head(table,10)
str(table)
table <- extract_tables(file,  pages = 2, guess = FALSE, area = list(c(2,2,610,788)), method = "data.frame")
head(table,10)
extract_areas(file, pages = 2, method = "data.frame")
locate_areas(file, pages = 2)
table <- extract_tables(file,  pages = 2, columns = list(8), method = "data.frame")
head(table,10)
table <- extract_tables(file,  pages = 2, columns = list(c(8)), method = "data.frame")
head(table,10)
head(table)
table
str(table)
table <- extract_tables(file,  pages = 2, method = "data.frame")
table
table <- extract_tables(file,  columns = list(8), method = "data.frame")
str(table)
head(table[[2]],10)
paste(table[[2]][1:3,1],sep=" ")
paste(table[[2]][1:3,2],sep=" ")
paste(table[[2]][1:3,4],sep=" ")
paste(table[[2]][1:3,4],sep="")
table[[2]][1,4]
paste0(table[[2]][1:3,4],sep="")
is.null(table[[2]][1,1])
is.na(table[[2]][1,1])
paste0(table[[2]][1:3,4],sep="",collapse=TRUE)
sprint("%s %s %s %s",table[[2]][1:4,1])
sprintf("%s %s %s %s",table[[2]][1:4,1])
sprintf("%s %s %s %s",table[[2]][1,1],table[[2]][2,1],table[[2]][3,1],table[[2]][4,1])
table[[2]][10:20,]
table[[2]][11,2]==""
table[[2]][11,2]==" "
table[[2]][10:25,]
which(table[[2]][5]=="")
i <- 20
matches <- which(table[[2]][5]=="")
i - matches
i - matches > 0
diff<- i - matches
diff
diff[diff>0]
i -matches[matches<i]
i -matches[matches>i]
range <- min(i - matches[matches<i]):min(i - matches[matches>i])
range
matches
write.csv(table,"C:/Users/mevans/Desktop/Workplan/test.csv")
write.csv(table[[2]],"C:/Users/mevans/Desktop/Workplan/test.csv")
for (i in length(table)){
write.csv(table[[i]],sprintf("C:/Users/mevans/Desktop/Workplan/page%s.csv",i))
}
for (i in 1:length(table)){
write.csv(table[[i]],sprintf("C:/Users/mevans/Desktop/Workplan/page%s.csv",i))
}
str(table)
head(table[[2]],20)
which(table[[2]][20,]=="")
lapply(4:lenght(table[[2]][6]), function(x, y)
if(y[x,6] != "" & y[x+1, 6] == "" & y[x-1,6] == ""){
y[x, which(y[x-1]!="")] <- paste0(y[x-1,which(y[x-1]!="")],y[x+1,which(y[x+1]!="")])
}, y = table[[2]])
lapply(4:length(table[[2]][6]), function(x, y)
if(y[x,6] != "" & y[x+1, 6] == "" & y[x-1,6] == ""){
y[x, which(y[x-1]!="")] <- paste0(y[x-1,which(y[x-1]!="")],y[x+1,which(y[x+1]!="")])
}, y = table[[2]])
lapply(4:length(table[[2]][6]), function(x, y)
if(y[x,6] != "" & y[x+1, 6] == "" & y[x-1,6] == ""){
y[x, which(y[x-1,]!="")] <- paste0(y[x-1,which(y[x-1,]!="")],y[x+1,which(y[x+1,]!="")])
}, y = table[[2]])
lapply(4:length(table[[2]][6]), function(x, y)
if((y[x,6] != "") & (y[x+1, 6] == "") & (y[x-1,6] == "")){
y[x, which(y[x-1,]!="")] <- paste0(y[x-1,which(y[x-1,]!="")],y[x+1,which(y[x+1,]!="")])
}, y = table[[2]])
table[[2]][5,6]
table[[2]][56,6]
table[[2]][6,6]
which((table[[2]][6] != "") & (table[[2]][6] == "") & (table[[2]][6] == ""))
for(x in 4:length(table[[2]][6]))  {
y <- table[[2]])
if((y[x,6] != "") & (y[x+1, 6] == "") & (y[x-1,6] == "")){
y[x, which(y[x-1,]!="")] <- paste0(y[x-1,which(y[x-1,]!="")],y[x+1,which(y[x+1,]!="")])
}}
y <- table[[2]])
y <- table[[2]]
for(x in 4:length(table[[2]][6]))  {
if((y[x,6] != "") & (y[x+1, 6] == "") & (y[x-1,6] == "")){
y[x, which(y[x-1,]!="")] <- paste0(y[x-1,which(y[x-1,]!="")],y[x+1,which(y[x+1,]!="")])
}}
save.image("C:/Users/mevans/Desktop/Workplan/tableprocessing.RData")
load("C:/Users/mevans/Desktop/Workplan/tableprocessing.RData")
install.packages("stringr")
?str_trim
library(str_trim)
library(stringer)
library(stringr)
?str_trim
library(tabulizer)
test <- extract_tables("FWS7yrplan")
test <- extract_tables("/FWS7yrplan")
test <- extract_tables("C:Users/mevans/Desktop/Workplan/FWS7yrplan.pdf")
test <- extract_tables(file)
length(test)
head(test[[1]])
head(test[[2]])
head(test[[2]],10)
save.image("C:/Users/mevans/Desktop/Workplan/tableprocessing.RData")
24*40*52
load("I:/MikeGradSchool/PhD/Bears/analyses/SMRC/2014/NEBcombinedWrong.RData")
library(secr)
bark <- subset(NEB, traps = paste(150:175, sep = ","))
dbar(bark)
RPSV(bark)
9261/58796
6898/191045
238/4666
setwd("C:/Users/mevans/repos/section7_update")
load("C:/Users/mevans/repos/recovery_units/data.RData")
setwd("C:/Users/mevans/repos/recovery_units")
for (i in c("1980", "1985", "1990", "1995", "2000", "2005", "2010","2015")){
#if(!is.na(goddamn$Year[i])){
#goddamn$Scholar_z[i] <- (goddamn$scholar[i] - median(goddamn$scholar[goddamn$Group == goddamn$Group[i] & goddamn$Year == goddamn$Year[i]], na.rm = TRUE))/sd(goddamn$scholar[goddamn$Group == goddamn$Group[i] & goddamn$Year == goddamn$Year[i]], na.rm = TRUE)
#goddamn$Scholar_z[i] <- (goddamn$scholar[i] - median(goddamn$scholar[goddamn$Year == goddamn$Year[i]], na.rm=TRUE))/sd(goddamn$scholar[goddamn$Year == goddamn$Year[i]], na.rm=TRUE)
goddamn$Scholar_z[!is.na(goddamn$scholar) & is.na(goddamn$Scholar_z) & !is.na(goddamn$Year) & goddamn$Year == paste(i,"01-01",sep ="-")] <- (goddamn$scholar[!is.na(goddamn$scholar) & is.na(goddamn$Scholar_z) & !is.na(goddamn$Year) & goddamn$Year == paste(i,"01-01",sep ="-")] - median(goddamn$scholar[goddamn$Year == paste(i,"01-01",sep ="-")], na.rm=TRUE))/sd(goddamn$scholar[goddamn$Year == paste(i,"01-01",sep ="-")], na.rm=TRUE)
#}else{
#goddamn$Scholar_z[i] <- (goddamn$scholar[i] - median(goddamn$scholar[goddamn$Group == goddamn$Group[i]], na.rm = TRUE))/sd(goddamn$scholar[goddamn$Group == goddamn$Group[i]], na.rm = TRUE)
#}
}
View(goddamn)
ggplot(data = goddamn, aes(y = Scholar_z, x = group, color = group, fill = group))+
scale_color_manual(name = NULL, values =c("orange", "blue"), labels = NULL, guide = FALSE)+
scale_fill_manual(name = NULL, values =c("orange", "blue"), labels = NULL, guide = FALSE)+
geom_violin(alpha = 0.3, color = "white")+
stat_boxplot(geom = "errorbar", width = 0.2, lwd = 1, color = "black")+
geom_boxplot(lwd = 1, width = 0.2, fill = "white", color = "black")+
labs(x = NULL, y = "Number of Citations (Z-score)", title = "Google Scholar Citation Rates per Species")+ ylim(-1, 8)+
scale_x_discrete(labels = c("Species with\nRecovery Units", "All Species"))+
theme_minimal()+theme(panel.grid.major.x = element_blank())
library(dplyr)
library(ggplot2)
library(lme4)
library(mclogit)
library(party)
library(plotly)
library(pROC)
library(stringr)
library(tidyr)
ggplot(data = goddamn, aes(y = Scholar_z, x = group, color = group, fill = group))+
scale_color_manual(name = NULL, values =c("orange", "blue"), labels = NULL, guide = FALSE)+
scale_fill_manual(name = NULL, values =c("orange", "blue"), labels = NULL, guide = FALSE)+
geom_violin(alpha = 0.3, color = "white")+
stat_boxplot(geom = "errorbar", width = 0.2, lwd = 1, color = "black")+
geom_boxplot(lwd = 1, width = 0.2, fill = "white", color = "black")+
labs(x = NULL, y = "Number of Citations (Z-score)", title = "Google Scholar Citation Rates per Species")+ ylim(-1, 8)+
scale_x_discrete(labels = c("Species with\nRecovery Units", "All Species"))+
theme_minimal()+theme(panel.grid.major.x = element_blank())
ct <- ctree(group~Region+Group+Area_z+Priority+Status+Scholar_z+Office, data = filter(goddamn, !is.na(ymd)), controls = ctree_control(mincriterion = 0.90))
auc <- roc(response = goddamn$group, predictor = unlist(predict(ct, newdata = goddamn, type = "prob"))[seq(1,nrow(goddamn)*2,2)])
ct_nogr <- ctree(group~Region+Area_z+Priority+Status+Office+Scholar_z, data = filter(goddamn, !is.na(ymd)), controls = ctree_control(mincriterion = 0.90))
auc_nogr <- roc(response = goddamn$group, predictor = unlist(predict(ct_nogr, newdata = goddamn, type = "prob"))[seq(1,nrow(goddamn)*2,2)])
ct_noof <- ctree(group~Region+Group+Area_z+Priority+Status+Scholar_z, data = filter(goddamn, !is.na(ymd)), controls = ctree_control(mincriterion = 0.90))
auc_noof <- roc(response = goddamn$group, predictor = unlist(predict(ct_noof, newdata = goddamn, type = "prob"))[seq(1,nrow(goddamn)*2,2)])
ct_nogrof <- ctree(group~Region+Area_z+Priority+Status+Scholar_z, data = filter(goddamn, !is.na(ymd)), controls = ctree_control(mincriterion = 0.90))
auc_nogrof <- roc(response = goddamn$group, predictor = unlist(predict(ct_nogrof, newdata = goddamn, type = "prob"))[seq(1,nrow(goddamn)*2,2)])
plot(auc)
plot(auc_noof, add = T, lty = 2)
plot(auc_nogr, add = T, lty = 3)
plot(auc_nogrof, add = T, lty = 6)
plot(ct)
plot(ct_nopl)
plot(ct_nogr)
plot(ct_noof)
plot(ct_nogrof)
plot(auc)
plot(auc_noof, add = T, lty = 2)
plot(auc_nogr, add = T, lty = 3)
plot(auc_nogrof, add = T, lty = 6)
plot(auc, xlim = c(1,0), ylim = c(0,1))
plot(auc, xlim = c(1,0), ylim = c(0,1))
plot(auc_noof, add = T, lty = 2, col = "blue")
plot(auc_nogr, add = T, lty = 3, col = "green")
plot(auc_nogrof, add = T, lty = 6, col = "red")
plot(auc, xlim = c(1,0), ylim = c(0,1))
plot(auc_noof, add = T, lty = 2, col = "blue")
plot(auc_nogr, add = T, lty = 3, col = "green4")
plot(auc_nogrof, add = T, lty = 6, col = "red")
legend(0.1, 0.1, c("Full", "- Office", "- Taxa", "-Office & Taxa"))
legend(0.1, 0.1, c("Full", "- Office", "- Taxa", "-Office & Taxa"), lty = c(1,2,3,6))
legend(0.2, 0.2, c("Full", "- Office", "- Taxa", "-Office & Taxa"), lty = c(1,2,3,6), col = c("black", "blue", "green4", "red"))
legend(0.2, 0.2, c("Full", "No Office", "No Taxa", "No Office & Taxa"), lty = c(1,2,3,6), col = c("black", "blue", "green4", "red"))
legend(0.25, 0.2, c("Full", "No Office", "No Taxa", "No Office & Taxa"), lty = c(1,2,3,6), col = c("black", "blue", "green4", "red"))
plot(auc, xlim = c(1,0), ylim = c(0,1))
plot(auc_noof, add = T, lty = 2, col = "blue")
plot(auc_nogr, add = T, lty = 3, col = "green4")
plot(auc_nogrof, add = T, lty = 6, col = "red")
legend(0.25, 0.2, c("Full", "No Office", "No Taxa", "No Office & Taxa"), lty = c(1,2,3,6), col = c("black", "blue", "green4", "red"))
plot(ct)
plot(ct_nogrof)
plot(ct_norof, inner_panel = node_inner(ct_nogrof, id = FALSE), terminal_panel = node-terminal(ct_nogrof, id = FALSE))
plot(ct_nogrof, inner_panel = node_inner(ct_nogrof, id = FALSE), terminal_panel = node-terminal(ct_nogrof, id = FALSE))
plot(ct_nogrof, inner_panel = node_inner(ct_nogrof, id = FALSE), terminal_panel = node_terminal(ct_nogrof, id = FALSE))
plot(ct_nogrof, type = "extend", inner_panel = node_inner(ct_nogrof, id = FALSE), terminal_panel = node_terminal(ct_nogrof, id = FALSE))
plot(ct_nogrof, type = "extend", inner_panel = node_inner(ct_nogrof, id = FALSE), terminal_panel = node_terminal(ct_nogrof))
plot(ct_nogrof, inner_panel = node_inner(ct_nogrof, id = FALSE))
plot(ct_nogrof, type = "extend", inner_panel = node_inner(ct_nogrof, id = FALSE))
plot(ct_nogrof, type = "extend", inner_panel = node_inner(ct_nogrof, id = FALSE), terminal_panel = node_barplot(ct_nogrof, id = FALSE))
plot(ct_nogrof, type = "extend", inner_panel = node_inner(ct_nogrof, id = FALSE), terminal_panel = node_barplot(ct_nogrof, id = FALSE, fill = c("orange", "blue")))
plot(ct_nogrof, type = "extend", inner_panel = node_inner(ct_nogrof, id = FALSE), terminal_panel = node_barplot(ct_nogrof, id = FALSE, fill = c("blue", "orange")))
plot(ct_noof, type = "extend", inner_panel = node_inner(ct_noof, id = FALSE), terminal_panel = node_barplot(ct_noof, id = FALSE, fill = c("blue", "orange")))
filter(compare, recov == 1)%>%select(Scientific, Common, Group, Units, Date)
ggplot()+
geom_violin(data = compare[compare$Units>0, ], aes(y = fcons/cons, x = factor(0)), fill = "orange", alpha = 0.3, color = "white")+
stat_boxplot(data = compare[compare$Units>0, ], aes(y = fcons/cons, x = factor(0)), geom = "errorbar",    width = 0.2, lwd = 1)+
geom_boxplot(data = compare[compare$Units>0, ], aes(y = fcons/cons, x = factor(0)), lwd = 1, width = 0.2)+
geom_violin(data = ps[!(ps$Var1%in%rus$Scientific), ], aes(y = Freq, x = factor(1)), fill = "blue",      alpha = 0.3, color = "white")+
stat_boxplot(data = ps[!(ps$Var1%in%rus$Scientific), ], aes(y = Freq, x = factor(1)), geom =             "errorbar", width = 0.2, lwd = 1)+
geom_boxplot(data = ps[!(ps$Var1%in%rus$Scientific), ], aes(y = Freq, x = factor(1)), lwd = 1, width = 0.2)+
labs(x = NULL, y = "Proportion of Consultations", title = "Formal Consultation Rates per Species")+
scale_x_discrete(labels = c("All Species", "Species with\nRecovery Units"))+
theme_minimal()+theme(legend.position = c(1, .9), panel.grid.major.x = element_blank())
ggplot()+
geom_violin(data = compare[compare$Units>0, ], aes(y = fcons/cons, x = factor(0)), fill = "orange", alpha = 0.3, color = "white")+
stat_boxplot(data = compare[compare$Units>0, ], aes(y = fcons/cons, x = factor(0)), geom = "errorbar",    width = 0.2, lwd = 1)+
geom_boxplot(data = compare[compare$Units>0, ], aes(y = fcons/cons, x = factor(0)), lwd = 1, width = 0.2)+
geom_violin(data = ps[!(ps$Var1%in%rus$Scientific), ], aes(y = Freq, x = factor(1)), fill = "blue",      alpha = 0.3, color = "white")+
stat_boxplot(data = ps[!(ps$Var1%in%rus$Scientific), ], aes(y = Freq, x = factor(1)), geom =             "errorbar", width = 0.2, lwd = 1)+
geom_boxplot(data = ps[!(ps$Var1%in%rus$Scientific), ], aes(y = Freq, x = factor(1)), lwd = 1, width = 0.2)+
labs(x = NULL, y = "Proportion of Consultations", title = "Formal Consultation Rates per Species")+
scale_x_discrete(labels = c("Species w/ Recovery Units", "All Species"))+
theme_minimal()+theme(legend.position = c(1, .9), panel.grid.major.x = element_blank())
ggplot(data = goddamn, aes(y = Scholar_z, x = group, color = group, fill = group))+
scale_color_manual(name = NULL, values =c("orange", "blue"), labels = NULL, guide = FALSE)+
scale_fill_manual(name = NULL, values =c("orange", "blue"), labels = NULL, guide = FALSE)+
geom_violin(alpha = 0.3, color = "white")+
stat_boxplot(geom = "errorbar", width = 0.2, lwd = 1, color = "black")+
geom_boxplot(lwd = 1, width = 0.2, fill = "white", color = "black")+
labs(x = NULL, y = "Number of Citations (Z-score)", title = "Google Scholar Citation Rates per Species")+ ylim(-1, 6)+
scale_x_discrete(labels = c("Species with\nRecovery Units", "All Species"))+
theme_minimal()+theme(panel.grid.major.x = element_blank())
ggplot(data = goddamn, aes(y = Scholar_z, x = group, color = group, fill = group))+
scale_color_manual(name = NULL, values =c("orange", "blue"), labels = NULL, guide = FALSE)+
scale_fill_manual(name = NULL, values =c("orange", "blue"), labels = NULL, guide = FALSE)+
geom_violin(alpha = 0.3, color = "white")+
stat_boxplot(geom = "errorbar", width = 0.2, lwd = 1, color = "black")+
geom_boxplot(lwd = 1, width = 0.2, fill = "white", color = "black")+
labs(x = NULL, y = "Number of Citations (Z-score)", title = "Google Scholar Citation Rates per Species")+ ylim(-1, 6)+
scale_x_discrete(labels = c("Species w/Recovery Units", "All Species"))+
theme_minimal()+theme(panel.grid.major.x = element_blank())
scholar_test <- t.test(goddamn$Scholar_z[goddamn$group == "R"], goddamn$Scholar_z[goddamn$group == "A"])
scholar_test
medain(goddamn$scholar[goddamn$group == "A"], na.rm = TRUE)
median(goddamn$scholar[goddamn$group == "A"], na.rm = TRUE)
median(goddamn$scholar[goddamn$group == "R"], na.rm = TRUE)
ggplot(data = goddamn, aes(y = Area_z, x = group, color = group, fill = group))+
scale_color_manual(name = NULL, values =c("orange", "blue"), labels = NULL, guide = FALSE)+
scale_fill_manual(name = NULL, values =c("orange", "blue"), labels = NULL, guide = FALSE)+
geom_violin(alpha = 0.3, color = "white")+
stat_boxplot(geom = "errorbar", width = 0.2, lwd = 1, color = "black")+
geom_boxplot(lwd = 1, width = 0.2, fill = "white", color = "black")+
labs(x = NULL, y = "Range Size (Z-score)", title = "Comparison of Species Range Sizes")+ylim(-1, 10)+
scale_x_discrete(labels = c("Species with\nRecovery Units", "All Species"))+
theme_minimal()+theme(panel.grid.major.x = element_blank())
ggplot(data = goddamn, aes(y = Area_z, x = group, color = group, fill = group))+
scale_color_manual(name = NULL, values =c("orange", "blue"), labels = NULL, guide = FALSE)+
scale_fill_manual(name = NULL, values =c("orange", "blue"), labels = NULL, guide = FALSE)+
geom_violin(alpha = 0.3, color = "white")+
stat_boxplot(geom = "errorbar", width = 0.2, lwd = 1, color = "black")+
geom_boxplot(lwd = 1, width = 0.2, fill = "white", color = "black")+
labs(x = NULL, y = "Range Size (Z-score)", title = "Species Range Sizes")+ylim(-1, 10)+
scale_x_discrete(labels = c("Species w/Recovery Units", "All Species"))+
theme_minimal()+theme(panel.grid.major.x = element_blank())
area_test
median(goddamn$Area[goddamn$group == "R"], na.rm = TRUE)
median(goddamn$Area[goddamn$group == "A"], na.rm = TRUE)
head(esacounties)
plot(ct)
plot(ct_noof)
plot(ct_noof, type = "extend", inner_panel = node_inner(ct_noof, id = FALSE), terminal_panel = node_barplot(ct_noof, id = FALSE, fill = c("blue", "orange")))
ct_noof
taxa_test
taxa_test_p
chisq.test(taxa_test[ ,11:12])
chisq.test(taxa_stats[ ,11:12])
taxa_stats[ ,c(1,11:12)]
chisq.test(taxa_stats[ c(1:7),11:12])
chisq.test(taxa_stats[ c(1:5,7),11:12])
ggplot( data = filter(taxa_stats)%>%gather("group", "count", count_all, count_recov)%>%group_by(group)%>%mutate(prop = count/sum(count)), aes(x = Group, y = prop, fill = group ))+
geom_bar(stat = "identity", width = 0.5, position = "dodge")+
scale_fill_manual(name = NULL, values = c("blue", "orange"), labels = c("All Species", "Species with\nRecovery Units"))+
labs( x = NULL, y = "Percentage of Species", title = "Representation of Taxonomic Groups")+
theme_minimal()+theme(legend.position = c(.85, .9), axis.text.x = element_text(angle = 45), panel.grid.major.x=element_blank(), legend.background = element_rect(color = "white"))
round(mean(compare$frate, na.rm = TRUE), 2)
round(mean(ps$Freq, na.rm = TRUE),2)
mean(compare$frate[compare$recov == 1])
mean(compare$frate[compare$recov == 1], rm.na = TRUE)
mean(compare$frate[compare$recov == 1], na.rm = TRUE)
nrow(filter(full, formal_consult == "Yes"))
7543/nrow(full)
median(compare$frate[compare$recov == 1], na.rm = TRUE)
ct_nopl <- ctree(group~Office+Group+Area_z+Priority+Status+Scholar_z, data = filter(goddamn, Group != "Plants", !is.na(ymd)), controls = ctree_control(mincriterion = 0.90))
plot(ct_nopl)
auc_nopl <- roc(response = goddamn$group, predictor = unlist(predict(ct_nopl, newdata = goddamn, type = "prob"))[seq(1,nrow(goddamn)*2,2)])
plot(auc_nopl)
auc_nopl <- roc(response = goddamn$group, predictor = unlist(predict(ct_nopl, newdata = goddamn, type = "prob"))[seq(1,nrow(goddamn)*2,2)])
plot(ct_nopl)
ct_nopl
plot(ct_nogrof, type = "extend", inner_panel = node_inner(ct_nogrof, id = FALSE), terminal_panel = node_barplot(ct_nogrof, id = FALSE, fill = c("blue", "orange")))
plot(ct_nopl)
save.image("C:/Users/mevans/repos/recovery_units/data.RData")
load("C:/Users/mevans/repos/recovery_units/data.RData")
View(goddamn)
unique(spp_plans$Species_Recovery_Priority_Number)
save(spp_plans, file = "C:/Users/mevans/repos/recovery_units/recoveryPlans.RData")
ggplot( data = filter(taxa_stats)%>%gather("group", "count", count_all, count_recov)%>%group_by(group)%>%mutate(prop = count/sum(count)), aes(x = Group, y = prop, fill = group ))+
geom_bar(stat = "identity", width = 0.5, position = "dodge")+
scale_fill_manual(name = NULL, values = c("blue", "orange"), labels = c("All Species", "Species with\nRecovery Units"))+
labs( x = NULL, y = "Percentage of Species", title = "Representation of Taxonomic Groups")+
theme_minimal()+theme(legend.position = c(.85, .9), axis.text.x = element_text(angle = 45), panel.grid.major.x=element_blank(), legend.background = element_rect(color = "white"))
library(dplyr)
library(ggplot2)
library(lme4)
library(mclogit)
library(party)
library(plotly)
library(pROC)
library(stringr)
library(tidyr)
ggplot( data = filter(taxa_stats)%>%gather("group", "count", count_all, count_recov)%>%group_by(group)%>%mutate(prop = count/sum(count)), aes(x = Group, y = prop, fill = group ))+
geom_bar(stat = "identity", width = 0.5, position = "dodge")+
scale_fill_manual(name = NULL, values = c("blue", "orange"), labels = c("All Species", "Species with\nRecovery Units"))+
labs( x = NULL, y = "Percentage of Species", title = "Representation of Taxonomic Groups")+
theme_minimal()+theme(legend.position = c(.85, .9), axis.text.x = element_text(angle = 45), panel.grid.major.x=element_blank(), legend.background = element_rect(color = "white"))
